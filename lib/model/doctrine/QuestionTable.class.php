<?php

/**
 * QuestionTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class QuestionTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object QuestionTable
   */
  public static function getInstance()
  {
      return Doctrine_Core::getTable('Question');
  }

  /**
   * Build the query necessary to make the search by tags
   */
  public function getQueryQuestionByTags($tags, $order)
  {
    // Define ordering
    if ($order == 'latest')
      $order = 'q.created_at DESC';
    elseif($order == 'views')
      $order = 'q.views DESC';
    elseif($order == 'rated')
      $order = 'q.interested_users DESC';

    // Build the query
    $q = Doctrine_Query::create()
      ->select()
      ->from('Question q')
      ->leftJoin('q.QuestionTag qt')
      ->leftJoin('qt.Tag t');

    // Define tags, if existing
    if (!empty($tags))
      $tags = Tagged::prepareTags($tags);
    else
      $tags = null;
    
    if (count($tags) > 1)
    {      
      $num_tags = count($tags);
      $q->whereIn('t.name', $tags);
      $q->groupBy('t.name');
      $q->having('COUNT(*) = ?', $num_tags);
    }
    elseif(count($tags) == 1)
    {
      $q->where('t.name = ?', $tags);
    }
    
    $q->orderBy($order);
    
    return $q;
  }

  /**
   * Execute an update for the interested users counter.
   */
  public function updateQuestionInterest($qid, $amount)
  {
    $q = Doctrine_Query::create()
      ->update('Question q')
      ->set('q.interested_users','q.interested_users + ?', $amount)
      ->where('q.id = ?',$qid);
    return $q->execute();
  }

  /**
   * Get number of questions with at least an answer.
   */
  public function getQuestionWithAnswer()
  {
    $q = Doctrine_Query::create()
      ->select('DISTINCT a.question_id as qid')
      ->from('Answer a');
    $values = $q->fetchArray();
    return count($values);
  }

  /**
   * Get the last 10 questions for a given user id.
   */
  public function getLastTenByUserId($user_id)
  {
    $q = Doctrine_Query::create()
      ->from('Question q')
      ->where('q.user_id = ?', $user_id)
      ->limit(10);
    return $q->execute();
  }
}