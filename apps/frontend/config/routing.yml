# You can find more information about this file on the symfony website:
# http://www.symfony-project.org/reference/1_4/en/10-Routing

question:
  class:   sfDoctrineRouteCollection
  options: { model: Question }

answer:
  class:   sfDoctrineRouteCollection
  options: { model: Answer }

static:
  class:   sfDoctrineRouteCollection
  options: { model: Static }

# Show the static page
static_show:
  url:  /:path
  class:   sfDoctrineRoute
  options: { model: StaticContent, type: object }
  param: { module: static, action: show }
  requirements:
    id: \d+
    sf_method: [get]

# Show the question list
question_list_tags:
  url:  /questions/tagged/:tags
  class:  sfDoctrineRoute
  options: { model: Question, type: list }
  param:  { module: question, action: index }
  requirements:
    sf_method: [get]

# Show the question page
question_show:
  url:	/questions/:id/:title_slug/
  class:   sfDoctrineRoute
  options: { model: Question, type: object }
  param: { module: question, action: show }
  requirements:
    id: \d+
    sf_method: [get]

# Increase the views counter for the question page.
increase_view_count:
  url: /post/:id/:token
  param: {module: question, action: increaseviewcount}
  class: sfRequestRoute
  requirements:
    id: \d+
    sf_method: [get]

# question vote
question_vote:
  url: /questions/vote/:id/:type/:token
  param: {module: question, action: vote}
  class: sfRequestRoute
  requirements:
    id: \d+
    type: (up|down)
    sf_method: [get]

# question undo an existing vote
undo_question_vote:
  url: /questions/vote/undo/:id/:type/:token
  param: {module: question, action: undovote}
  class: sfRequestRoute
  requirements:
    id: \d+
    type: (up|down)
    sf_method: [get]

# answer vote
answer_vote:
  url: /answer/vote/:id/:type/:token
  param: {module: answer, action: vote}
  class: sfRequestRoute
  requirements:
    id: \d+
    type: (up|down)
    sf_method: [get]

# answer undo an existing vote
undo_answer_vote:
  url: /answer/vote/undo/:id/:type/:token
  param: {module: answer, action: undovote}
  class: sfRequestRoute
  requirements:
    id: \d+
    type: (up|down)
    sf_method: [get]

# accept answer
accept_answer:
  url: /answer/accept/:id/:token
  param: {module: answer, action: accept}
  class: sfRequestRoute
  requirements:
    id: \d+
    sf_method: [get]

# Autocomplete widget
autocomplete:
  url:     /questions/autocomplete
  class:   sfRequestRoute
  param:   { module: question, action: autocomplete }

# Show the homepage
homepage:
  url:   /
  param: { module: question, action: index }

sf_guard_signin:
  url:   /login
  param: { module: sfGuardAuth, action: signin }

sf_guard_signout:
  url:   /logout
  param: { module: sfGuardAuth, action: signout }

#User personal profile by User Module
user_profile:
  url:  user/:username
  param: { module: user, action: show }
  requirements:
    sf_method: [get]

#User page list by user module 
user_list:
  url:  users/list
  param: { module: user, action: list }

#Registration User by sfApply
apply:
  url:  /register
  param: { module: sfApply, action: apply }

sf_guard_register:
  url:  /register
  param: { module: sfApply, action: apply }

#validate registration for not Logged User by sfApply  
validate:
  url: /confirm/:validate
  param: { module: sfApply, action: confirm }

#Reset password for logged User by sfApply
reset:
  url: user/reset-password
  param: { module: sfApply, action: reset }

#Setting password for logged User by sfApply
settings:
  url: user/edit
  param: { module: sfApply, action: settings }

sf_guard_forgot_password:
  url: /request
  param: { module: sfApply, action: resetRequest }

#Reset password for not Logged User by sfApply
resetRequest:
  url: /request
  param: { module: sfApply, action: resetRequest }

#Reset password for not Logged User by sfGuardPlugin
sf_guard_password:
  url: /request
  param: { module: sfApply, action: resetRequest }
